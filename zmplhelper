#!/bin/sh
# vim: ft=sh
PROG=$(basename $0)
BINDIR=$(dirname $(readlink -f $0))

echoerr() {
	echo "$@" >&2
}

usage_exit() {
	echoerr "[USAGE]"
	echoerr "$PROG recv PARAMETERS..."
	echoerr "$PROG list snapshot [-l] DATASET"
	echoerr "$PROG list dataset [-r] DATASET"
	echoerr "$PROG grant sender [-u USER] DATASET"
	echoerr "$PROG grant receiver [-u USER] DATASET"
	echoerr
	exit 1
}

recv() {
	zfs receive "$@"
}

extract_snapshot_name() {
	local longname=$1
	if [ $longname -eq 0 ]; then
		sed -e 's/.*@//'
	else
		cat
	fi
}

list_snapshot() {
	local OPTIND
	local longname=0
	while getopts "l" opt
	do
		case "$opt" in
			l)
				longname=1
				;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	local ds=$1
	if [ -n "$ds" ]; then
		zfs list -o name -H -t snapshot -r "$ds" | fgrep "$ds@" | extract_snapshot_name $longname
	fi
}

list_dataset() {
	local OPTIND
	local recursive=0
	while getopts "r" opt
	do
		case "$opt" in
			r)
				recursive=1
				;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	local ds=$1
	if [ -n "$ds" ]; then
		if [ $recursive -eq 1 ]; then
			zfs list -o name -H -t filesystem -r "$ds"
		else
			echo "$ds"
		fi
	fi
}

confirm() {
	local msg=$1
	local answer
	if [ -n "$msg" ]; then
		echo "$msg"
	fi
	echo -n "OK? (y/N): "
	read answer
	case "$answer" in
		[yY]*)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

grant() {
	local OPTIND
	local user answer
	while getopts "u:" opt
	do
		case "$opt" in
			u)
				user="$OPTARG"
				;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	local privilege=$1
	local ds=$2
	if [ -z "$user" ]; then
		user=$(whoami)
		if [ -z "$user" ]; then
			echoerr "Error: don't know who to grant privileges."
			exit 1
		fi
	fi
	if [ -z "$privilege" -o -z "$ds" ]; then
		usage_exit
	fi
	case "$privilege" in
		sender)
			echo sudo zfs allow -u "$user" send,snapshot,hold "$ds"
			confirm && sudo zfs allow -u "$user" send,snapshot,hold "$ds"
			;;
		receiver)
			echo sudo zfs allow -u "$user" receive,create,mount,mountpoint,compression,recordsize,atime,canmount "$ds"
			confirm && sudo zfs allow -u "$user" receive,create,mount,mountpoint,compression,recordsize,atime,canmount "$ds"
			;;
		*)
			usage_exit
			;;
	esac
}

while getopts "s" opt
do
	case "$opt" in
		s)
			set -- $SSH_ORIGINAL_COMMAND
			progname=$1
			shift
			if [ "$PROG" != "$progname" ]; then
				exit 1
			fi
			;;
	esac
done
shift $(( $OPTIND - 1 ))

cmd=$1
shift

case "$cmd" in
	recv)
		recv "$@"
		;;
	list)
		what=$1
		shift
		case "$what" in
			snapshot)
				list_snapshot "$@"
				;;
			dataset)
				list_dataset "$@"
				;;
			*)
				usage_exit
				;;
		esac
		;;
	grant)
		grant "$@"
		;;
	*)
		usage_exit
		;;
esac

